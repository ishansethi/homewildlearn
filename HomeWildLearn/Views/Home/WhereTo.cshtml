@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>

<style>
    /* Always set the map height explicitly to define the size of the div
     * element that contains the map. */
    #map {
        height: 500px;
        background-color: grey;
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    /* TODO: Step 4A1: Make a generic sidebar */
    /* Styling for an info pane that slides out from the left.
     * Hidden by default. */
    #panel {
        height: 100%;
        width: null;
        background-color: white;
        position: fixed;
        z-index: 1;
        overflow-x: hidden;
        transition: all .2s ease-out;
    }

    .open {
        width: 250px;
    }

    /* Styling for place details */
    .hero {
        width: 100%;
        height: auto;
        max-height: 166px;
        display: block;
    }

    .place,
    p {
        font-family: 'open sans', arial, sans-serif;
        padding-left: 18px;
        padding-right: 18px;
    }

    .details {
        color: darkslategrey;
    }

    a {
        text-decoration: none;
        color: cadetblue;
    }

    .seo-header, .product-header, .intro-type .container h1.white, .company-heading

    .parallax {
        background-repeat: repeat;
        background-size: cover;
        position: absolute;
        top: 0px;
        bottom: 0px;
        width: 100%;
        z-index: -10;
        bb
    }

    .ct-btn-scroll {
        width: 49px;
        height: 49px;
        position: absolute;
        bottom: 25%;
        left: 0;
        right: 0;
        margin: auto;
        padding-top: 50px;
        z-index: 9;
        border-radius: 50%;
        -webkit-transition: background-color 0.25s ease-in-out;
        transition: background-color 0.25s ease-in-out;
    }

    img, figure {
        max-width: 100%;
    }
</style>


<div class="ftco-blocks-cover-1">
    <div class="site-section-cover overlay" data-stellar-background-ratio="0.5" style="background-image: url('../Content/images/animals/zoo.jpeg')">
        <div class="container">
            <div class="row align-items-center ">
                <div class="col-md-5 mt-5 pt-5">
                    <span class="text-cursive h2 text-red">Welcome To Wild-HomeLearn</span>
                    <p><a href="#" class="text-yellow">Looking for zoo's, parks or wildlife areas? </a></p>
                    <p><a href="#" class="text-white">Home</a> <span class="mx-0">/</span> <strong>Whats near me?</strong></p>
                </div>
                <a class="ct-btn-scroll ct-js-btn-scroll" href="#sec1"><img alt="Arrow Down Icon" src="https://raw.githubusercontent.com/solodev/scroll-down-anchor/master/images/arrow-down-1.png"></a>
            </div>
        </div>
    </div>
</div>
<div class="site-section bg-warning" id="sec1">
    <div class="container">
        <div class="row mb-5">
            <div class="col-12 text-center">
                <span class="text-cursive h2 text-white d-block">Here are your nearby WildLife Parks where you all can go and EXPLORE!!  </span>
                <span class="text-cursive h2 text-white d-block">Click on the RED Marker Below  </span>

            </div>
        </div>
    </div>
</div>






<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script type="text/javascript">
    // Configure our weather widget during jQuery.OnReady
    $(function () {
        var isMetric = false;
        var locationUrl = "";
        var currentConditionsUrl = "";
        var language = "en";

        var apiKey = "hoArfRosT1215";
        var awxClearMessages = function () {
            $("#awxLocationInfo").html("...");
            $("#awxLocationUrl").html("...");
            $("#awxWeatherInfo").html("...");
            $("#awxWeatherUrl").html("...");
        }

        var awxCityLookUp = function (freeText) {
            awxClearMessages();
            locationUrl = "https://apidev.accuweather.com/locations/v1/search?q=" + freeText + "&apikey=" + apiKey;
            $.ajax({
                type: "GET",
                url: locationUrl,
                dataType: "jsonp",
                cache: true,                    // Use cache for better reponse times
                jsonpCallback: "awxCallback",   // Prevent unique callback name for better reponse times
                success: function (data) { awxCityLookUpFound(data); }
            });
        };
        // Displays what location(s) were found.
        var awxCityLookUpFound = function (data) {
            var msg, locationKey = null;
            $("#awxLocationUrl").html("<a href=" + encodeURI(locationUrl) + ">" + locationUrl + "</a>");
            if (data.length == 1) {
                locationKey = data[0].Key;
                msg = "One location found: <b>" + data[0].LocalizedName + "</b>. Key: " + locationKey;
            }
            else if (data.length == 0) {
                msg = "No locations found."
            }
            else {
                locationKey = data[0].Key;
                msg = "Multiple locations found (" + data.length + "). Selecting the first one: " +
                    "<b>" + data[0].LocalizedName + ", " + data[0].Country.ID + "</b>. Key: " + locationKey;
            }
            $("#awxLocationInfo").html(msg);
            if (locationKey != null) {
                awxGetCurrentConditions(locationKey);
            }

        };
        // Gets current conditions for the location.
        // For more info about Current Conditions API go to http://apidev.accuweather.com/developers/locations
        var awxGetCurrentConditions = function (locationKey) {
            currentConditionsUrl = "https://apidev.accuweather.com/currentconditions/v1/" + locationKey + ".json?language=" + language + "&apikey=" + apiKey;
            $.ajax({
                type: "GET",
                url: currentConditionsUrl,
                dataType: "jsonp",
                cache: true,                    // Use cache for better reponse times
                jsonpCallback: "awxCallback",   // Prevent unique callback name for better reponse times
                success: function (data) {
                    var html;
                    if (data && data.length > 0) {
                        var conditions = data[0];
                        var temp = isMetric ? conditions.Temperature.Metric : conditions.Temperature.Imperial;
                        html = conditions.WeatherText + ", " + temp.Value + " " + temp.Unit;
                    }
                    else {
                        html = "N/A";
                    }
                    $("#awxWeatherInfo").html(html);
                    $("#awxWeatherUrl").html("<a href=" + currentConditionsUrl + ">" + currentConditionsUrl + "</a>");
                }
            });
        };
        $("#awxSearchTextBox").keypress(function (e) {
            if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                var text = $("#awxSearchTextBox").val();
                awxCityLookUp(text);
                return false;
            } else {
                return true;
            }
        });
        $("#awxSearchButton").click(function () {
            var text = $("#awxSearchTextBox").val();
            awxCityLookUp(text);
        });
    });
</script>


<div id="panel"></div>

<!-- Map appears here -->
<div id="map"></div>


<div class="site-section bg-warning">
    <div class="container">
        <div class="row mb-5">
            <div class="col-12 text-center">
                <span class="text-cursive h2 text-white d-block">Here are your weather details...Just type the desired place.</span>
                <br />
            </div>
            <div>
                <h3>Enter location name:</h3>
                <input id="awxSearchTextBox" placeholder="st Kilda" />
                <input id="awxSearchButton" class="btn-danger" type="submit" value="Search" />
            </div>
            <hr>
            <h3>Current Conditions</h3>
            <ul>
                <li><span id="awxWeatherInfo"></span>
            </ul>
        </div>
    </div>
</div>

<script>
    /* Note: This example requires that you consent to location sharing when
     * prompted by your browser. If you see the error "Geolocation permission
     * denied.", it means you probably did not give permission for the browser * to locate you. */
    let pos;
    let map;
    let bounds;
    let infoWindow;
    let currentInfoWindow;
    let service;
    let infoPane;
    function initMap() {
        // Initialize variables
        bounds = new google.maps.LatLngBounds();
        infoWindow = new google.maps.InfoWindow;
        currentInfoWindow = infoWindow;
        /* TODO: Step 4A3: Add a generic sidebar */
        infoPane = document.getElementById('panel');

        // Try HTML5 geolocation
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(position => {
                pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                map = new google.maps.Map(document.getElementById('map'), {
                    center: pos,
                    zoom: 15
                });
                bounds.extend(pos);

                infoWindow.setPosition(pos);
                infoWindow.open(map);
                map.setCenter(pos);

                // Call Places Nearby Search on user's location
                getNearbyPlaces(pos);
            }, () => {
                // Browser supports geolocation, but user has denied permission
                handleLocationError(true, infoWindow);
            });
        } else {
            // Browser doesn't support geolocation
            handleLocationError(false, infoWindow);
        }
    }

    // Handle a geolocation error
    function handleLocationError(browserHasGeolocation, infoWindow) {
        // Set default location to Sydney, Australia
        pos = { lat: -33.856, lng: 151.215 };
        map = new google.maps.Map(document.getElementById('map'), {
            center: pos,
            zoom: 15
        });

        // Display an InfoWindow at the map center
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
            'Geolocation permissions denied. Using default location.' :
            'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
        currentInfoWindow = infoWindow;

        // Call Places Nearby Search on the default location
        getNearbyPlaces(pos);
    }

    // Perform a Places Nearby Search Request
    function getNearbyPlaces(position) {
        let request = {
            location: position,
            rankBy: google.maps.places.RankBy.DISTANCE,
            keyword: 'wildlife'
        };

        service = new google.maps.places.PlacesService(map);
        service.nearbySearch(request, nearbyCallback);
    }

    // Handle the results (up to 20) of the Nearby Search
    function nearbyCallback(results, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
            createMarkers(results);
        }
    }

    // Set markers at the location of each place result
    function createMarkers(places) {
        places.forEach(place => {
            let marker = new google.maps.Marker({
                position: place.geometry.location,
                map: map,
                title: place.name
            });

            /* TODO: Step 4B: Add click listeners to the markers */
            // Add click listener to each marker
            google.maps.event.addListener(marker, 'click', () => {
                let request = {
                    placeId: place.place_id,
                    fields: ['name', 'formatted_address', 'geometry', 'rating',
                        'website', 'photos']
                };

                /* Only fetch the details of a place when the user clicks on a marker.
                 * If we fetch the details for all place results as soon as we get
                 * the search response, we will hit API rate limits. */
                service.getDetails(request, (placeResult, status) => {
                    showDetails(placeResult, marker, status)
                });
            });

            // Adjust the map bounds to include the location of this marker
            bounds.extend(place.geometry.location);
        });
        /* Once all the markers have been placed, adjust the bounds of the map to
         * show all the markers within the visible area. */
        map.fitBounds(bounds);
    }

    /* TODO: Step 4C: Show place details in an info window */
    // Builds an InfoWindow to display details above the marker
    function showDetails(placeResult, marker, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
            let placeInfowindow = new google.maps.InfoWindow();
            let rating = "None";
            let formatted_address = "None";
            if (placeResult.rating) rating = placeResult.rating;
            if (placeResult.formatted_address) formatted_address = placeResult.formatted_address;
            placeInfowindow.setContent('<div><strong>' + placeResult.name +
                '</strong><br>' + 'Rating: ' + rating + '<br>' + 'Address' + formatted_address + '</div>');
            placeInfowindow.open(marker.map, marker);
            currentInfoWindow.close();
            currentInfoWindow = placeInfowindow;
            showPanel(placeResult);
        } else {
            console.log('showDetails failed: ' + status);
        }
    }

    /* TODO: Step 4D: Load place details in a sidebar */
    // Displays place details in a sidebar
    function showPanel(placeResult) {
        // If infoPane is already open, close it
        if (infoPane.classList.contains("open")) {
            infoPane.classList.remove("open");
        }

        // Clear the previous details
        while (infoPane.lastChild) {
            infoPane.removeChild(infoPane.lastChild);
        }

        /* TODO: Step 4E: Display a Place Photo with the Place Details */
        // Add the primary photo, if there is one
        if (placeResult.photos) {
            let firstPhoto = placeResult.photos[0];
            let photo = document.createElement('img');
            photo.classList.add('hero');
            photo.src = firstPhoto.getUrl();
            infoPane.appendChild(photo);
        }


        // Add place details with text formatting
        let name = document.createElement('h1');
        name.classList.add('place');
        name.textContent = placeResult.name;
        infoPane.appendChild(name);
        if (placeResult.rating) {
            let rating = document.createElement('p');
            rating.classList.add('details');
            rating.textContent = `Rating: ${placeResult.rating} \u272e`;
            infoPane.appendChild(rating);
        }
        let address = document.createElement('p');
        address.classList.add('details');
        address.textContent = placeResult.formatted_address;
        infoPane.appendChild(address);
        if (placeResult.website) {
            let websitePara = document.createElement('p');
            let websiteLink = document.createElement('a');
            let websiteUrl = document.createTextNode(placeResult.website);
            websiteLink.appendChild(websiteUrl);
            websiteLink.title = placeResult.website;
            websiteLink.href = placeResult.website;
            websitePara.appendChild(websiteLink);
            infoPane.appendChild(websitePara);
        }

        // Open the infoPane
        infoPane.classList.add("open");
    }
</script>
<script>
    $(document).ready(function () {
        $("a").on('click', function (event) {
            if (this.hash !== "") {
                event.preventDefault();
                var hash = this.hash;
                $('html, body').animate({
                    scrollTop: $(hash).offset().top
                }, 800, function () {
                    window.location.hash = hash;
                });
            }
        });
    });


</script>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBDw6UmJSbIyVdFGzZRvutTSBLsC8iBow8&libraries=places&callback=initMap">
</script>